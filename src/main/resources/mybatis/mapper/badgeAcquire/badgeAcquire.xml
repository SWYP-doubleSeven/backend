<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.swyp.doubleSeven.domain.badgeAcquire.dao.BadgeAcquireDAO">

    <insert id="insertBadgeAcquire" parameterType="BadgeAcquireRequest">
        INSERT INTO BADGE_ACQUIRE (MEMBER_ID, BADGE_ID, GET_DATE)
        SELECT #{memberId}, #{badgeId}, NOW()
        FROM DUAL
        WHERE NOT EXISTS (
            SELECT 1
            FROM BADGE_ACQUIRE
            WHERE MEMBER_ID = #{memberId} AND BADGE_ID = #{badgeId}
        )
    </insert>

    <select id="getMaxMoneyMemberList" resultType="java.util.ArrayList">
        SELECT
            MEMBER_ID
        FROM SAVING
        WHERE RGST_DT BETWEEN DATE_FORMAT(CURDATE(), '%Y-%m-01') AND LAST_DAY(CURDATE())
        GROUP BY MEMBER_ID
        HAVING SUM(AMOUNT) = (
            SELECT MAX(TOTAL_AMOUNT)
            FROM (
                     SELECT SUM(AMOUNT) AS TOTAL_AMOUNT
                     FROM SAVING
                     WHERE RGST_DT BETWEEN DATE_FORMAT(CURDATE(), '%Y-%m-01') AND LAST_DAY(CURDATE())
                     GROUP BY MEMBER_ID
                 ) AS SUBQUERY
        )
    </select>

    <insert id="insertBadgeAcquireAfterSaving" parameterType="badgeAcquireRequest">
        INSERT INTO BADGE_ACQUIRE (MEMBER_ID, BADGE_ID, GET_DATE)
        SELECT #{memberId} AS MEMBER_ID, B.BADGE_ID, NOW()
        FROM BADGE_COUNT A
                 LEFT OUTER JOIN BADGE B ON A.BADGE_TYPE = B.BADGE_TYPE
                 LEFT OUTER JOIN BADGE_ACQUIRE C ON A.MEMBER_ID = C.MEMBER_ID AND B.BADGE_ID = C.BADGE_ID
        WHERE EXISTS (
            SELECT 1
                FROM BADGE_COUNT A
            LEFT OUTER JOIN BADGE B ON A.BADGE_TYPE = B.BADGE_TYPE
            LEFT OUTER JOIN BADGE_ACQUIRE C ON A.MEMBER_ID = C.MEMBER_ID AND B.BADGE_ID = C.BADGE_ID
            WHERE A.BADGE_TYPE = #{badgeType}
                AND B.BADGE_TYPE = #{badgeType}
                AND A.MEMBER_ID = #{memberId}
                AND A.COUNT >= B.VALUE
                AND C.BADGE_ID IS NULL
        )
        AND A.BADGE_TYPE = #{badgeType}
        AND B.BADGE_TYPE = #{badgeType}
        AND A.MEMBER_ID = #{memberId}
        AND A.COUNT >= B.VALUE
        AND C.BADGE_ID IS NULL
    </insert>

    <insert id="insertBadgeAcquireAfterLogin" parameterType="badgeAcquireRequest">
        INSERT INTO BADGE_ACQUIRE (MEMBER_ID, BADGE_ID, GET_DATE)
        SELECT
            A.MEMBER_ID,
            B.BADGE_ID,
            NOW()
        FROM
            MEMBER_ATTENDANCE A
                LEFT OUTER JOIN BADGE B ON
                B.BADGE_TYPE = #{badgeType}
                LEFT OUTER JOIN BADGE_ACQUIRE C ON
                        A.MEMBER_ID = C.MEMBER_ID
                    AND B.BADGE_ID = C.BADGE_ID
        WHERE
            (
                (B.BADGE_TYPE = 'ATTENDANCE' AND A.COUNT >= B.VALUE) OR
                (B.BADGE_TYPE = 'CONSECUTIVE_ATTENDANCE' AND A.CONSECUTIVE_DAYS >= B.VALUE)
            )
          AND A.MEMBER_ID = #{memberId}
          AND C.BADGE_ID IS NULL;
    </insert>
</mapper>
