<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.swyp.doubleSeven.domain.member.dao.MemberDAO">

    <!-- ★★ 구글 소셜 로그인 ★★ -->

    <!-- ★★ 카카오 소셜 로그인 ★★ -->

    <!-- resultMap -->
    <resultMap id="MemberResultMap" type="com.swyp.doubleSeven.domain.member.dto.response.MemberResponse">
        <id property="memberId" column="MEMBER_ID" />
        <result property="memberKeyId" column="MEMBER_KEY_ID" />
        <result property="memberNickname" column="MEMBER_NICKNAME" />
        <result property="memberName" column="MEMBER_NAME" />
        <result property="email" column="EMAIL" />
        <result property="role" column="ROLE" />
        <result property="loginType" column="LOGIN_TYPE" />
        <result property="dltnYn" column="DLTN_YN" />
        <result property="rgstDt" column="RGST_DT" />
        <result property="updtDt" column="UPDT_DT" />
    </resultMap>


    <select id="findMemberByMemberId" resultMap="MemberResultMap">
        SELECT
            MEMBER_ID
             , MEMBER_KEY_ID
             , MEMBER_NICKNAME
             , MEMBER_NAME
             , EMAIL
             , ROLE
             , LOGIN_TYPE
             , DATE_FORMAT(RGST_DT, '%Y-%m-%d %H:%i:%s') AS RGST_DT
             , DATE_FORMAT(UPDT_DT, '%Y-%m-%d %H:%i:%s') AS UPDT_DT
        FROM MEMBER
        WHERE MEMBER_ID = #{memberId}
        AND DLTN_YN = 'N'
    </select>


    <!-- memberKeyId 이용해 사용자 조회 -->
    <select id="findMemberByMemberKeyId" resultMap="MemberResultMap">
        SELECT
            MEMBER_ID
            , MEMBER_KEY_ID
            , MEMBER_NICKNAME
            , MEMBER_NAME
            , EMAIL
            , ROLE
            , LOGIN_TYPE
            , DATE_FORMAT(RGST_DT, '%Y-%m-%d %H:%i:%s') AS RGST_DT
            , DATE_FORMAT(UPDT_DT, '%Y-%m-%d %H:%i:%s') AS UPDT_DT
        FROM MEMBER
        WHERE 1=1
            AND MEMBER_KEY_ID = #{memberKeyId}
            AND DLTN_YN = 'N'
    </select>

    <!-- 사용자 등록/업데이트 -->
    <insert id="insertMember" parameterType="MemberRequest" useGeneratedKeys="true" keyProperty="memberId">
        INSERT INTO MEMBER (
            MEMBER_KEY_ID,
            MEMBER_NICKNAME,
            MEMBER_NAME,
            EMAIL,
            ROLE,
            LOGIN_TYPE,
            DLTN_YN,
            RGST_ID,
            RGST_DT,
            UPDT_ID,
            UPDT_DT
        ) VALUES (
            #{memberKeyId},
            #{memberNickname},
            #{memberName},
            #{email},
            #{role},
            #{loginType},
            #{dltnYn},
            #{rgstId},
            #{rgstDt},
            #{updtId},
            #{updtDt}
        )
    </insert>

    <!--게스트->카카오 로그인전환시 사용자 정보 업데이트-->
    <update id="updateMemberRole" parameterType="MemberRequest">
        UPDATE MEMBER SET
            ROLE = #{role},
            LOGIN_TYPE = #{loginType},
            MEMBER_KEY_ID = #{memberKeyId},
            MEMBER_NICKNAME = #{memberNickname},
            UPDT_ID = #{updtId},
            UPDT_DT = #{updtDt}
        WHERE MEMBER_ID = #{memberId}
    </update>

    <!--중복 닉네임 검증-->
    <select id="isSameNickname" parameterType="java.lang.String" resultType="java.lang.String">
        SELECT
            CASE
                WHEN COUNT(*) > 0 THEN 'true'
                ELSE 'false'
                END AS RESULT
        FROM MEMBER
        WHERE MEMBER_NICKNAME = #{nickname}
    </select>

    <update id="updateMemberNickname" parameterType="MemberRequest">
        UPDATE MEMBER SET
              MEMBER_NICKNAME = #{memberNickname}
              , UPDT_ID = #{memberId}
              , UPDT_DT = NOW()
          WHERE MEMBER_ID = #{memberId}
    </update>

    <delete id="deleteOldMember">
        <![CDATA[
        DELETE FROM MEMBER
        WHERE MEMBER_ID IN (
            SELECT A.MEMBER_ID
            FROM MEMBER A
                     LEFT JOIN MEMBER_ATTENDANCE B ON A.MEMBER_ID = B.MEMBER_ID
            WHERE B.LAST_LOGIN_DATE < DATE_SUB(NOW(), INTERVAL 1 YEAR)
              AND A.ROLE = 'MEMBER'
        )
        ]]>
    </delete>

    <update id="withdrawMember" parameterType="java.lang.Integer">
        UPDATE MEMBER SET
            DLTN_YN = 'Y'
            , UPDT_ID = #{memberId}
            , UPDT_DT = NOW()
        WHERE MEMBER_ID = #{memberId}
        AND ROLE IN ('MEMBER', 'ADMIN')
    </update>


</mapper>
