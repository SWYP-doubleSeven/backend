<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.swyp.doubleSeven.domain.badge.dao.UserBadgeDAO">

    <!-- resultMap -->
    <resultMap id="BadgeResultMap" type="com.swyp.doubleSeven.domain.badge.dto.response.BadgeResponse">
        <id property="badgeId" column="BADGE_ID"/>
        <result property="badgeName" column="BADGE_NAME"/>
        <result property="emblemPath" column="EMBLEM_PATH"/>
        <result property="badgeType" column="BADGE_TYPE"/>
        <result property="badgeTypeKr" column="BADGE_TYPE_KR"/>
        <result property="badgeDescription" column="BADGE_DESCRIPTION"/>
        <result property="operator" column="OPERATOR"/>
        <result property="value" column="VALUE"/>
        <result property="acquireYN" column="ACQUIRE_YN"/>
        <result property="rgstId" column="RGST_ID"/>
        <result property="rgstDt" column="RGST_DT"/>
        <result property="updtId" column="UPDT_ID"/>
        <result property="updtDt" column="UPDT_DT"/>
    </resultMap>

    <!-- 뱃지 단건 조회 -->
    <select id="getBadge" parameterType="badgeRequest" resultMap="BadgeResultMap">
        SELECT
            A.BADGE_ID,
            A.BADGE_NAME,
            A.EMBLEM_PATH,
            A.BADGE_TYPE,
            A.BADGE_TYPE_KR,
            A.BADGE_DESCRIPTION,
            A.OPERATOR,
            A.VALUE,
            A.RGST_ID,
            DATE_FORMAT(A.RGST_DT, '%Y-%m-%d %H:%i:%s') AS RGST_DT,
            A.UPDT_ID,
            DATE_FORMAT(A.UPDT_DT, '%Y-%m-%d %H:%i:%s') AS UPDT_DT,
            CASE WHEN B.BADGE_ID IS NOT NULL THEN 'Y' ELSE 'N' END AS ACQUIRE_YN
        FROM BADGE A
        LEFT OUTER JOIN BADGE_ACQUIRE B
            ON A.BADGE_ID = B.BADGE_ID
            AND B.MEMBER_ID = #{memberId}
        WHERE 1=1
            AND A.BADGE_ID = #{badgeId}
    </select>

    <!-- 전체 뱃지 목록 조회 -->
    <select id="getBadgeList" parameterType="java.lang.Integer" resultMap="BadgeResultMap">
        SELECT
            A.BADGE_ID,
            A.BADGE_NAME,
            A.EMBLEM_PATH,
            A.BADGE_TYPE,
            A.BADGE_TYPE_KR,
            A.BADGE_DESCRIPTION,
            A.OPERATOR,
            A.VALUE,
            A.RGST_ID,
            DATE_FORMAT(A.RGST_DT, '%Y-%m-%d %H:%i:%s') AS RGST_DT,
            A.UPDT_ID,
            DATE_FORMAT(A.UPDT_DT, '%Y-%m-%d %H:%i:%s') AS UPDT_DT,
            CASE WHEN B.BADGE_ID IS NOT NULL THEN 'Y' ELSE 'N' END AS ACQUIRE_YN
        FROM BADGE A
        LEFT OUTER JOIN BADGE_ACQUIRE B
            ON A.BADGE_ID = B.BADGE_ID
            AND B.MEMBER_ID = #{memberId}
        WHERE 1=1
        AND NOT(A.BADGE_TYPE = 'MAX_MONEY' AND B.BADGE_ID IS NULL)
        AND NOT(A.BADGE_TYPE = 'DATE' AND B.BADGE_ID IS NULL)
    </select>

    <!-- 새로 얻은 뱃지 top3 목록 조회 -->
    <select id="getBadgeListLimit3" parameterType="java.lang.Integer" resultMap="BadgeResultMap">
        SELECT
            A.BADGE_ID,
            A.BADGE_NAME,
            A.EMBLEM_PATH,
            A.BADGE_TYPE,
            A.BADGE_TYPE_KR,
            A.BADGE_DESCRIPTION
        FROM BADGE A
                 LEFT OUTER JOIN BADGE_ACQUIRE B
                                 ON A.BADGE_ID = B.BADGE_ID
                                     AND B.MEMBER_ID = #{memberId}
        WHERE 1=1
            AND B.BADGE_ID IS NOT NULL
        ORDER BY B.GET_DATE DESC
        LIMIT 3
    </select>

    <!--소비 기록 후 획득가능한 뱃지목록 조회-->
    <select id="getBadgeIdAfterSaving" parameterType="badgeRequest" resultMap="BadgeResultMap">
        SELECT * FROM BADGE A
        LEFT OUTER JOIN BADGE_ACQUIRE B
            ON A.BADGE_ID = B.BADGE_ID
            AND B.MEMBER_ID = #{memberId}
        INNER JOIN MEMBER C
            ON C.MEMBER_ID = #{memberId}
        WHERE 1=1
            AND (
                    (A.BADGE_TYPE = 'LOG' AND (SELECT COUNT(*) FROM SAVING WHERE MEMBER_ID = #{memberId}) >= A.VALUE)
                    OR
                    (A.BADGE_TYPE = 'MONEY' AND (SELECT SUM(AMOUNT) FROM SAVING WHERE MEMBER_ID = #{memberId}) >= A.VALUE)
                )
            AND B.BADGE_ID IS NULL
            AND C.`ROLE` != 'GUEST'
    </select>

    <!--로그인 후 획득가능한 뱃지목록 조회-->
    <select id="getBadgeIdAfterLogin" parameterType="badgeRequest" resultMap="BadgeResultMap">
        SELECT
            B.BADGE_ID,
            B.BADGE_NAME,
            B.EMBLEM_PATH,
            B.BADGE_TYPE,
            B.BADGE_TYPE_KR,
            B.BADGE_DESCRIPTION,
            B.OPERATOR,
            B.VALUE,
            DATE_FORMAT(B.RGST_DT, '%Y-%m-%d %H:%i:%s') AS RGST_DT,
            'Y' AS ACQUIRE_YN
        FROM
            MEMBER_ATTENDANCE A
                LEFT OUTER JOIN BADGE B ON B.BADGE_TYPE IN ('ATTENDANCE', 'CONSECUTIVE_ATTENDANCE')
                LEFT OUTER JOIN BADGE_ACQUIRE C ON
                        A.MEMBER_ID = C.MEMBER_ID
                    AND B.BADGE_ID = C.BADGE_ID
        WHERE
            (
                    (B.BADGE_TYPE = 'ATTENDANCE' AND A.COUNT >= B.VALUE) OR
                    (B.BADGE_TYPE = 'CONSECUTIVE_ATTENDANCE' AND A.CONSECUTIVE_DAYS >= B.VALUE)
                )
          AND A.MEMBER_ID = #{memberId}
          AND C.BADGE_ID IS NULL
    </select>

</mapper>
