<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.swyp.doubleSeven.domain.badge.dao.AdminBadgeDAO">

    <!-- resultMap -->
    <resultMap id="BadgeResultMap" type="com.swyp.doubleSeven.domain.badge.dto.response.BadgeResponse">
        <id property="badgeId" column="BADGE_ID"/>
        <result property="badgeName" column="BADGE_NAME"/>
        <result property="emblemPath" column="EMBLEM_PATH"/>
        <result property="badgeType" column="BADGE_TYPE"/>
        <result property="badgeDescription" column="BADGE_DESCRIPTION"/>
        <result property="operator" column="OPERATOR"/>
        <result property="value" column="VALUE"/>
        <result property="count" column="COUNT"/>
        <result property="rgstId" column="RGST_ID"/>
        <result property="rgstDt" column="RGST_DT"/>
        <result property="updtId" column="UPDT_ID"/>
        <result property="updtDt" column="UPDT_DT"/>
    </resultMap>

    <!-- 관리자-뱃지 등록-->
    <insert id="insertBadge" parameterType="BadgeRequest" useGeneratedKeys="true" keyProperty="badgeId">
        INSERT INTO BADGE (
            BADGE_NAME,
            EMBLEM_PATH,
            BADGE_TYPE,
            BADGE_DESCRIPTION,
            OPERATOR,
            VALUE,
            RGST_ID,
            RGST_DT,
            UPDT_ID,
            UPDT_DT
        ) VALUES (
            #{badgeName},
            #{emblemPath},
            #{badgeType},
            #{badgeDescription},
            #{operator},
            #{value},
            #{memberId},
            NOW(),
            #{memberId},
            NOW()
        )
    </insert>

    <!-- 관리자-뱃지 업데이트 -->
    <update id="updateBadge" parameterType="BadgeRequest">
        UPDATE BADGE SET
            BADGE_NAME = #{badgeName},
            EMBLEM_PATH = #{emblemPath},
            BADGE_TYPE = #{badgeType},
            BADGE_DESCRIPTION = #{badgeDescription},
            OPERATOR = #{operator},
            VALUE = #{value},
            UPDT_ID = #{memberId},
            UPDT_DT = NOW()
        WHERE BADGE_ID = #{badgeId}
    </update>

    <!--뱃지 삭제-->
    <delete id="deleteBadge" parameterType="java.lang.Integer">
        DELETE FROM BADGE
        WHERE BADGE_ID = #{badgeId}
    </delete>

    <!-- 전체 뱃지 목록 조회 -->
    <select id="getBadgeList" parameterType="BadgeSearchCriteria" resultMap="BadgeResultMap">
        SELECT
            A.BADGE_ID,
            A.BADGE_NAME,
            A.EMBLEM_PATH,
            A.BADGE_TYPE,
            A.BADGE_DESCRIPTION,
            A.OPERATOR,
            A.VALUE,
            A.RGST_ID,
            DATE_FORMAT(A.RGST_DT, '%Y-%m-%d %H:%i:%s') AS RGST_DT,
            UPDT_ID,
            DATE_FORMAT(A.UPDT_DT, '%Y-%m-%d %H:%i:%s') AS UPDT_DT,
            IFNULL(B.COUNT, 0) AS COUNT
        FROM BADGE A
        LEFT OUTER JOIN (
            SELECT
                BADGE_ID,
                COUNT(MEMBER_ID) AS COUNT
            FROM
                BADGE_ACQUIRE
            GROUP BY BADGE_ID
        ) B
        ON A.BADGE_ID = B.BADGE_ID
        WHERE 1=1
        <if test="badgeName != null">
            AND BADGE_NAME LIKE CONCAT('%', #{badgeName}, '%')
        </if>
        <if test="badgeType != null">
            AND BADGE_TYPE = #{badgeType}
        </if>
        <if test="value != null">
            AND VALUE = #{value}
        </if>
        ORDER BY BADGE_ID ASC
    </select>

    <!-- 뱃지 단건 조회 -->
    <select id="getBadge" parameterType="badgeRequest" resultMap="BadgeResultMap">
        SELECT
            A.BADGE_ID,
            A.BADGE_NAME,
            A.EMBLEM_PATH,
            A.BADGE_TYPE,
            A.BADGE_DESCRIPTION,
            A.OPERATOR,
            A.VALUE,
            A.RGST_ID,
            DATE_FORMAT(A.RGST_DT, '%Y-%m-%d %H:%i:%s') AS RGST_DT,
            A.UPDT_ID,
            DATE_FORMAT(A.UPDT_DT, '%Y-%m-%d %H:%i:%s') AS UPDT_DT
        FROM BADGE A
        LEFT OUTER JOIN (
            SELECT
                BADGE_ID,
                COUNT(MEMBER_ID) AS COUNT
            FROM BADGE_ACQUIRE
            GROUP BY BADGE_ID
        ) B
        ON A.BADGE_ID = B.BADGE_ID
        WHERE 1=1
          AND A.BADGE_ID = #{badgeId}
    </select>

</mapper>
