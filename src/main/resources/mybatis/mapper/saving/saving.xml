<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.swyp.doubleSeven.domain.saving.dao.SavingDAO">
    <!-- resultMap -->
    <resultMap id="SavingResultResMap" type="com.swyp.doubleSeven.domain.saving.dto.response.SavingResponse">
        <id property="memberId" column="MEMBER_ID"/>
        <id property="savingId" column="SAVING_ID"/>
        <result property="savingYmd" column="SAVING_YMD"/>
        <result property="savingTime" column="SAVING_TIME" typeHandler="com.swyp.doubleSeven.domain.saving.handler.StringToLocalTimeTypeHandler"/>
        <result property="categoryName" column="SUB_CATEGORY_NAME"/>
        <result property="amount" column="AMOUNT"/>
    </resultMap>

    <!-- 가상 소비 등록 -->
    <insert id="insertSaving" useGeneratedKeys="true" keyProperty="savingId">
        INSERT INTO SAVING (
            MEMBER_ID,
            SAVING_YMD,
            AMOUNT,
            MAIN_CATEGORY_ID,
            SUB_CATEGORY_ID,
            RGST_ID,
            RGST_DT,
            UPDT_ID,
            UPDT_DT,
            IS_DELETE
        )
        SELECT
            #{memberId},
            #{savingYmd},
            #{amount},
            mc.MAIN_CATEGORY_ID,
            sc.SUB_CATEGORY_ID,
            #{memberId},
            CURRENT_TIMESTAMP,
            #{memberId},
            CURRENT_TIMESTAMP,
            'N'
        FROM SUB_CATEGORY sc
                 JOIN MAIN_CATEGORY mc ON sc.MAIN_CATEGORY_ID = mc.MAIN_CATEGORY_ID
        WHERE sc.SUB_CATEGORY_NAME = #{categoryName}
    </insert>

    <resultMap id="monthlySavingMap" type="com.swyp.doubleSeven.domain.saving.dto.response.SavingCalendarDayInfoResponse">
        <id property="day" column="day"/>
        <result property="dayTotalAmount" column="DAY_TOTAL_AMOUNT"/>
        <result property="count" column="COUNT"/>
        <collection property="categorySummaries" ofType="com.swyp.doubleSeven.domain.saving.dto.response.CategorySummary">
            <result property="categoryName" column="SUB_CATEGORY_NAME"/>
            <result property="categoryTotalAmount" column="CATEGORY_TOTAL_AMOUNT"/>
        </collection>
        <collection property="items" ofType="com.swyp.doubleSeven.domain.saving.dto.response.SavingResponse">
            <id property="savingId" column="SAVING_ID"/>
            <result property="memberId" column="MEMBER_ID"/>
            <result property="savingYmd" column="SAVING_YMD"/>
            <result property="savingTime" column="SAVING_TIME" typeHandler="com.swyp.doubleSeven.domain.saving.handler.StringToLocalTimeTypeHandler"/>
            <result property="categoryName" column="SUB_CATEGORY_NAME"/>
            <result property="amount" column="AMOUNT"/>
        </collection>
    </resultMap>

    <select id="selectSavingMonthly" resultMap="monthlySavingMap">
        WITH DayTotalAmount AS (
        SELECT
        DAY(SAVING_YMD) as day,
        SUM(AMOUNT) as DAY_TOTAL_AMOUNT,
        COUNT(*) as COUNT
        FROM SAVING
        WHERE MEMBER_ID = #{memberId}
        AND YEAR(SAVING_YMD) = #{year}
        AND MONTH(SAVING_YMD) = #{month}
        AND IS_DELETE = 'N'
        GROUP BY DAY(SAVING_YMD)
        ),
        FirstCategories AS (
        SELECT
        DAY(s.SAVING_YMD) as day,
        sub.SUB_CATEGORY_NAME,
        MIN(s.SAVING_YMD) as first_appearance,
        SUM(s.AMOUNT) as CATEGORY_TOTAL_AMOUNT
        FROM SAVING s
        JOIN SUB_CATEGORY sub
        ON s.SUB_CATEGORY_ID = sub.SUB_CATEGORY_ID
        WHERE s.MEMBER_ID = #{memberId}
        AND YEAR(s.SAVING_YMD) = #{year}
        AND MONTH(s.SAVING_YMD) = #{month}
        AND s.IS_DELETE = 'N'
        <if test="categoryName != null and categoryName != ''">
            AND sub.SUB_CATEGORY_NAME = #{categoryName}
        </if>
        GROUP BY
        DAY(s.SAVING_YMD),
        sub.SUB_CATEGORY_NAME
        )
        SELECT
        s.MEMBER_ID,
        DAY(s.SAVING_YMD) as day,
        dt.DAY_TOTAL_AMOUNT,
        dt.COUNT,
        s.SAVING_ID,
        s.SAVING_YMD as SAVING_YMD,
        DATE_FORMAT(s.RGST_DT, '%H:%i') as SAVING_TIME,
        sub.SUB_CATEGORY_NAME,
        s.AMOUNT,
        fc.CATEGORY_TOTAL_AMOUNT
        FROM SAVING s
        JOIN SUB_CATEGORY sub
        ON s.SUB_CATEGORY_ID = sub.SUB_CATEGORY_ID
        JOIN FirstCategories fc
        ON DAY(s.SAVING_YMD) = fc.day
        AND sub.SUB_CATEGORY_NAME = fc.SUB_CATEGORY_NAME
        JOIN DayTotalAmount dt
        ON DAY(s.SAVING_YMD) = dt.day
        WHERE s.MEMBER_ID = #{memberId}
        AND YEAR(s.SAVING_YMD) = #{year}
        AND MONTH(s.SAVING_YMD) = #{month}
        AND s.IS_DELETE = 'N'
        <if test="categoryName != null and categoryName != ''">
            AND sub.SUB_CATEGORY_NAME = #{categoryName}
        </if>
        ORDER BY
        day ASC,
        fc.first_appearance ASC,
        SAVING_TIME ASC
    </select>



    <!--<select id="selectSavingMonthly" resultMap="monthlySavingMap">
        SELECT
            s.MEMBER_ID,
            DAY(s.SAVING_YMD) as day,
            s.SAVING_ID,
            DATE_FORMAT(s.SAVING_YMD, '%Y-%m-%d %H:%i:%s') as SAVING_YMD,
            sub.SUB_CATEGORY_NAME,
            s.AMOUNT,
        (SELECT SUM(amount)
        FROM SAVING s3
        JOIN SUB_CATEGORY sub3 ON s3.SUB_CATEGORY_ID = sub3.SUB_CATEGORY_ID
        WHERE DAY(s3.SAVING_YMD) = DAY(s.SAVING_YMD)
            AND sub3.SUB_CATEGORY_NAME = sub.SUB_CATEGORY_NAME
            AND YEAR(s3.SAVING_YMD) = #{year}
            AND MONTH(s3.SAVING_YMD) = #{month}
            AND s3.MEMBER_ID = #{memberId}) as category_total_amount
        FROM SAVING s
            LEFT JOIN SUB_CATEGORY sub ON s.SUB_CATEGORY_ID = sub.SUB_CATEGORY_ID
        WHERE s.MEMBER_ID = #{memberId}
            AND YEAR(s.SAVING_YMD) = #{year}
            AND MONTH(s.SAVING_YMD) = #{month}
        <if test="categoryName != null and categoryName != ''">
            AND sub.SUB_CATEGORY_NAME = #{categoryName}
        </if>
        GROUP BY
            DAY(s.SAVING_YMD),
            s.SAVING_ID,
            sub.SUB_CATEGORY_NAME,
            s.AMOUNT
        ORDER BY
            day ASC,
            s.SAVING_YMD ASC
    </select>-->

    <!--  맵: 가상 소비 조회 (리스트) -->
    <resultMap id="SavingListResMap" type="com.swyp.doubleSeven.domain.saving.dto.response.SavingListResponse">
        <result property="totalAmount" column="total_amount"/>
        <result property="memberId" column="MEMBER_ID"/>
        <collection property="dailyGroups" ofType="com.swyp.doubleSeven.domain.saving.dto.response.SavingDailyGroup">
            <id property="day" column="day"/>
            <collection property="items" ofType="com.swyp.doubleSeven.domain.saving.dto.response.SavingResponse">
                <id property="savingId" column="SAVING_ID"/>
                <result property="memberId" column="MEMBER_ID"/>
                <result property="savingTime" column="SAVING_TIME" typeHandler="com.swyp.doubleSeven.domain.saving.handler.StringToLocalTimeTypeHandler"/>
                <result property="savingYmd" column="SAVING_YMD"/>
                <result property="amount" column="AMOUNT"/>
                <result property="categoryName" column="SUB_CATEGORY_NAME"/>
            </collection>
        </collection>
    </resultMap>

    <!-- 가상 소비 조회 (리스트) -->
    <select id="selectSavingList" resultMap="SavingListResMap">
        WITH DailyData AS (
            SELECT
                s.MEMBER_ID,
                s.SAVING_ID,
                DAY(s.SAVING_YMD) as day,
                s.SAVING_YMD,
                DATE_FORMAT(s.RGST_DT, '%H:%i') as SAVING_TIME,
                s.AMOUNT,
                sub.SUB_CATEGORY_NAME,
                (
                    SELECT SUM(amount)
                    FROM SAVING
                    WHERE MEMBER_ID = #{memberId}
                      AND YEAR(SAVING_YMD) = #{year}
                      AND MONTH(SAVING_YMD) = #{month}
                      AND IS_DELETE = 'N'
                ) as total_amount
            FROM SAVING s
                     LEFT JOIN SUB_CATEGORY sub ON s.SUB_CATEGORY_ID = sub.SUB_CATEGORY_ID
            WHERE s.MEMBER_ID = #{memberId}
              AND YEAR(s.SAVING_YMD) = #{year}
              AND MONTH(s.SAVING_YMD) = #{month}
              AND s.IS_DELETE = 'N'
        )
        SELECT *
        FROM DailyData
        ORDER BY day DESC, SAVING_TIME ASC
    </select>

    <!-- 가상 소비 단건 조회 -->
    <select id="selectSaving" parameterType="Integer" resultMap="SavingResultResMap">
        SELECT
            s.MEMBER_ID,
            s.SAVING_ID,
            s.SAVING_YMD,
            DATE_FORMAT(s.RGST_DT, '%H:%i') as SAVING_TIME,
            s.AMOUNT,
            s.MEMO,
            s.MAIN_CATEGORY_ID,
            mc.MAIN_CATEGORY_NAME,
            s.SUB_CATEGORY_ID,
            sc.SUB_CATEGORY_NAME
        FROM
            SAVING s
                JOIN MAIN_CATEGORY mc ON s.MAIN_CATEGORY_ID = mc.MAIN_CATEGORY_ID
                JOIN SUB_CATEGORY sc ON s.SUB_CATEGORY_ID = sc.SUB_CATEGORY_ID
        WHERE s.SAVING_ID = #{savingId}
          AND s.MEMBER_ID = #{memberId}
          AND s.IS_DELETE = 'N'
    </select>


    <!-- 가상 소비 수정 -->
    <update id="updateSaving">
        UPDATE SAVING s
        SET
            s.SAVING_YMD = #{savingRequest.savingYmd},
            s.AMOUNT = #{savingRequest.amount},
            s.MAIN_CATEGORY_ID = (
        SELECT sc.MAIN_CATEGORY_ID
        FROM SUB_CATEGORY sc
        WHERE sc.SUB_CATEGORY_NAME = #{savingRequest.categoryName}
        ),
        s.SUB_CATEGORY_ID = (
        SELECT sc.SUB_CATEGORY_ID
        FROM SUB_CATEGORY sc
        WHERE sc.SUB_CATEGORY_NAME = #{savingRequest.categoryName}
        ),
        s.UPDT_ID = #{savingRequest.memberId}, <!-- 임시 UPDT_ID -->
        s.UPDT_DT = CURRENT_TIMESTAMP
        WHERE s.SAVING_ID = #{savingId}
          AND s.MEMBER_ID = #{savingRequest.memberId}
          AND s.IS_DELETE = 'N'
    </update>

    <!-- 가상 소비 삭제 (소프트 삭제)-->
    <update id="deleteSaving">
        UPDATE SAVING
        SET IS_DELETE = 'Y'
        WHERE SAVING_ID = #{savingId} AND MEMBER_ID = #{memberId}
    </update>

    <!-- 삭제 되돌리기 (데이터 복구) -->
    <update id="cancleSavingDelete">
        UPDATE SAVING
        SET IS_DELETE = 'N'
        WHERE SAVING_ID = #{savingId} AND MEMBER_ID = #{memberId}
    </update>

</mapper>